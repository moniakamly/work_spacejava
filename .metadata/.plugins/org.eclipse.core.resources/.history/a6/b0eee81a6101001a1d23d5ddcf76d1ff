package mesStrings;

public class MaString {
	private static char[] lescaracteres;
	
	public static final MaString VRAI = new MaString(new char[] {'t','r','u','e'}, 0,4);
	public static final MaString FAUX =  new MaString(new char[] {'f','a','l','s','e'}, 0,5);
	public static final MaString CARACTERES = new MaString(new char[] {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q'},0,17);
	private static final char[] TAB_VIDE = new char[0];
	
	
	/**
	 * Les constructeurss
	 */

	public MaString() {
		lescaracteres = TAB_VIDE;
	}

	public MaString(char[] tab, int d, int f) {
		lescaracteres = new char[f - d];
		for (int i = d; i < f; i++)
			lescaracteres[i - d] = tab[i];
	}

	public MaString(MaString ms) {
		lescaracteres = ms.lescaracteres;
	}

	/**
	 * Les méthodes
	 *
	 * @return
	 */

	public int length() {
		return lescaracteres.length;
	}

	public boolean isEmpty() {
		return lescaracteres.length == 0;
	}

	public char charAt(int i) {
		return lescaracteres[i];
	}

	public MaString substring(int d, int f) {
		return new MaString(lescaracteres, d, f);

	}

	public int compareTo(MaString ms) {
		int lMin = lescaracteres.length < ms.lescaracteres.length ? lescaracteres.length : ms.lescaracteres.length;
		for (int i = 0; i < lMin; i++) {
			if (lescaracteres[i] == ms.lescaracteres[i])
				return (lescaracteres[i] - ms.lescaracteres[i]);
		}
		return (lescaracteres.length - ms.lescaracteres.length);
	}

	public boolean equals(MaString ms) {
		return compareTo(ms) == 0;
	}
	
	public boolean stastsWith(MaString prefixe) {
		if (prefixe.length()> length()) 
			return false; 
		for (int i=0; i <prefixe.length(); i++) 
			if (lescaracteres[i] != prefixe.lescaracteres[i]) 		 
				return false; 
		return true; 
	}
	
	public int indexOf(char c, int i) {
		int k = -1;
		for (; i < lescaracteres.length; i++) {
			if (lescaracteres[i] == c)
				return (k = i);
		}
		return (k);
	}

	public int indexOf(char c) {
		int k = -1;
		for (int i = 0; i < lescaracteres.length; i++) {
			if (lescaracteres[i] == c)
				return (k = i);
		}
		return (k);
	}
	
	public MaString concat(MaString ms) {
	char[] tab= new char[lescaracteres.length+ms.length()];
	
	
	for (int i=0; i < lescaracteres.length; i++) {
		tab[i] = lescaracteres[i];
		
	}
	int j=lescaracteres.length;
	
		for (int i=0; i <ms.length(); i++) {
			tab[j] = ms.lescaracteres[i];
			j++;
		}
	
		ms.lescaracteres=tab;
		return new MaString(ms);
		
		}
	
	/**
	 * les méthodes statiques 
	 * @param b
	 * @return
	 */
	
	public static MaString valueOf(boolean b) {
	//	if (b)
	//	 return VRAI; 
	//return FAUX; 
	return b ? VRAI : FAUX ; 
	}
	
	public static MaString valueOf(char c) {
		return CARACTERES;
	}
	
	public static int nombre_chiffre(int i) {
		int c=0;
		if (i<0) {
			i=-i;
		}
		do {
			c++;
		}while((i/=10)>0);
		return c;
	}
	
	public static MaString valueOf(int i) {
		MaString ms= new MaString();
		int taille=nombre_chiffre(i);
		System.out.println(taille);
		char[] tab= new char[taille];
		for (int k=0;k <taille;k++) {
			int val =i % 10; 
			lescaracteres[k]=(char)val;	
		}
		
		return ms;
	}
	


	public String toString() {
		return new String(lescaracteres);
	}

	public static void main(String[] args) {
		MaString ms = new MaString(new char[] { 't', 'y', 'o', 'm' }, 0, 3);
		/*System.out.println(">" + ms + "<");
		MaString ms2 = new MaString(ms);
		System.out.println(">" + ms2 + "<");*/
		MaString ms3 = new MaString(new char[] { 'm', 'o', 'n', 'n', 'i', 'a' }, 0, 6);
		/*System.out.println("Longueurs :" + ms.charAt(2) + " pour ms," + ms3.compareTo(ms) + " pour ms2," + ms3.length()
				+ " pour ms3,");
		System.out.println(ms3.compareTo(ms));*/
		System.out.println(ms3.equals(ms3));
		System.out.println(ms3.indexOf('n',4));
		System.out.println(ms.concat(ms3));
		System.out.println(valueOf(147));
	}

}
